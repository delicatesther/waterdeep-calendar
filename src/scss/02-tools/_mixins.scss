// ***************** Mixins ***************** //
// Description:
// Mixins can be used to automate certain CSS outputs, like media queries
// -----------------------------------------------

// -----------------------------------------------------------------------------
// Media queries and breakpoints
// -----------------------------------------------------------------------------
/// Create a single media condition out of a map of queries
@mixin media($queries) {
  @if length($queries) == 0 {
    @content;
  }
  @else {
    $first-key: nth(map-keys($queries), 1);

    @media screen and ($first-key: map-get($queries, $first-key)) {
      $queries: map-remove($queries, $first-key);

      @include media($queries) {
        @content;
      }
    }
  }
}

// Breakpoint recognition
// From: // From: https://www.sitepoint.com/sass-mixin-media-merging/
@mixin breakpoint($breakpoint) {
  // Get the query map for $breakpoints map
  $queries: map-get($breakpoints, $breakpoint);

  // If there is no query called $breakpoint in map, throw an error
  @if not $queries {
    @error "No value could be retrieved from `#{$breakpoint}`. "
    + "Please make sure it is defined in `$breakpoints` map.";
  }

  // Include the media mixin with $queries
  @include media($queries) {
    @content;
  }
}

// -----------------------------------------------------------------------------
// Quick CSS Resets (clearfix, list resets, etc)
// -----------------------------------------------------------------------------
@mixin clearfix() {
  *zoom: 1;
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Reset list styling
@mixin ulreset() {
  margin: 0;
  padding: 0;
  list-style: none;
}

// Maintain aspect ratio when scaling (16:9 as default values)
@mixin aspectratio($horizontal: 16, $vertical:9) {
  position: relative;
  &:before {
    content: "";
    display: block;
    width: 100%;
    padding-top: ($vertical / $horizontal) * 100%;
  }
}

// -----------------------------------------------------------------------------
// Browserhacks
// -----------------------------------------------------------------------------
@mixin browserexception($browser) {
  // IOs specific
  @if ($browser == 'iOS') {
    @supports (-webkit-overflow-scrolling: touch) {
        @content;
    }
  }
  // Internet Explorer 10+
  @if ($browser == 'IE') {
    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
      @content;
    }
  }
  // Microsoft Edge 12+
  @else if ($browser == 'edge') {
    @supports (-ms-ime-align: auto) {
      @content;
    }
  }
}



//
// // ======================================
// //  Tenday Query
// // ======================================
// @mixin tq($tenday, $half-tenday) {
//   $at-least: index($query,from);
//   $at-most : index($query,to);
//
//   //    loop through selectors to find the last selector of each part
//   //    the "alphabet" loop is just a simple way to listify selectors
//   //    (if the selector has more than 26 parts – you're on your own)
//   @if $tenday === 1 {
//     &:nth-child(n+1):nth-child(-n+10) {
//       @content;
//     }
//     @include breakpoint('m') {
//
//     }
//   }
//   @each $selector in & {
//     $list:();
//     @each $a, $b, $c, $d, $e, $f, $g, $h, $i, $j, $k, $l, $m, $n, $o, $p, $q, $r, $s, $t, $u, $v, $w, $x, $y, $z in $selector {
//       $list:append($list, $a $b $c $d $e $f $g $h $i $j $k $l $m $n $o $p $q $r $s $t $u $v $w $x $y $z);
//     }
//     $last: nth($list, length($list));
//
//     //    print nth selectors
//     @if $at-least and $at-most {
//       $min: nth($query, min($at-least, $at-most)+1);
//       $max: nth($query, max($at-least, $at-most)+1);
//       &:nth-last-child(n+#{$min}):nth-last-child(-n+#{$max}):first-child,
//       &:nth-last-child(n+#{$min}):nth-last-child(-n+#{$max}):first-child ~ #{$last} { @content; }
//     } @else if $at-least {
//       $min: nth($query, $at-least+1);
//       &:nth-last-child(n+#{$min}),
//       &:nth-last-child(n+#{$min}) ~ #{$last} { @content; }
//     } @else if $at-most {
//       $max: nth($query, $at-most+1);
//       &:nth-last-child(-n+#{$max}):first-child,
//       &:nth-last-child(-n+#{$max}):first-child ~ #{$last} { @content; }
//     }
//   }
// }

// ======================================
//  Quantity Query
// ======================================
@mixin qq($query){
    //    find to and from index in query
    $at-least: index($query,from);
    $at-most : index($query,to);

    //    loop through selectors to find the last selector of each part
    //    the "alphabet" loop is just a simple way to listify selectors
    //    (if the selector has more than 26 parts – you're on your own)
    @each $selector in & {
        $list:();
        @each $a, $b, $c, $d, $e, $f, $g, $h, $i, $j, $k, $l, $m, $n, $o, $p, $q, $r, $s, $t, $u, $v, $w, $x, $y, $z in $selector {
            $list:append($list, $a $b $c $d $e $f $g $h $i $j $k $l $m $n $o $p $q $r $s $t $u $v $w $x $y $z);
        }
        $last: nth($list, length($list));

        //    print nth selectors
        @if $at-least and $at-most {
            $min: nth($query, min($at-least, $at-most)+1);
            $max: nth($query, max($at-least, $at-most)+1);
            &:nth-last-child(n+#{$min}):nth-last-child(-n+#{$max}):first-child,
            &:nth-last-child(n+#{$min}):nth-last-child(-n+#{$max}):first-child ~ #{$last} { @content; }
        } @else if $at-least {
            $min: nth($query, $at-least+1);
            &:nth-last-child(n+#{$min}),
            &:nth-last-child(n+#{$min}) ~ #{$last} { @content; }
        } @else if $at-most {
            $max: nth($query, $at-most+1);
            &:nth-last-child(-n+#{$max}):first-child,
            &:nth-last-child(-n+#{$max}):first-child ~ #{$last} { @content; }
        }
    }
}

// How to use

//  ol li {
//     @include qq(from 2)     { /* styling if the list has 2 or more items */ }
//     @include qq(to 5)       { /* styling if the list has 5 or less items */ }
//     @include qq(from 2 to 5){ /* styling if the list has between 2 and 5 items */ }
//  }
